/**
Define a [lazily evaluated](https://en.wikipedia.org/wiki/Lazy_evaluation) property on an object.

<<<<<<< HEAD
@param object - Object to add property to.
@param propertyName - Name of the property to add.
@param fn - Called the first time `propertyName` is accessed.

@example
```
import defineLazyProp = require('define-lazy-prop');
=======
@param object - Object to add the property to.
@param propertyName - Name of the property to add.
@param valueGetter - Called the first time `propertyName` is accessed.

@example
```
import defineLazyProperty from 'define-lazy-prop';
>>>>>>> tundeseun/devtest

const unicorn = {
	// â€¦
};

<<<<<<< HEAD
defineLazyProp(unicorn, 'rainbow', () => expensiveComputation());
=======
defineLazyProperty(unicorn, 'rainbow', () => expensiveComputation());
>>>>>>> tundeseun/devtest

app.on('user-action', () => {
	doSomething(unicorn.rainbow);
});
```
*/
<<<<<<< HEAD
declare function defineLazyProp<
	ObjectType extends {[key: string]: unknown},
=======
export default function defineLazyProperty<
	ObjectType extends Record<string, any>,
>>>>>>> tundeseun/devtest
	PropertyNameType extends string,
	PropertyValueType
>(
	object: ObjectType,
	propertyName: PropertyNameType,
<<<<<<< HEAD
	fn: () => PropertyValueType
): ObjectType & {[K in PropertyNameType]: PropertyValueType};

export = defineLazyProp;
=======
	valueGetter: () => PropertyValueType
): ObjectType & {[K in PropertyNameType]: PropertyValueType};
>>>>>>> tundeseun/devtest
